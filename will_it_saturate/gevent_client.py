# AUTOGENERATED! DO NOT EDIT! File to edit: 22_gevent_client.ipynb (unless otherwise specified).

__all__ = ['fetch', 'FakeResponse', 'streaming_fetch', 'GeventClient', 'run_gevent_with_args', 'run_gevent']

# Cell
# hide


# import gevent

# from gevent import monkey
# from gevent.pool import Pool


import time
import requests

from datetime import datetime

from .servers import BaseServer
from .clients import BaseClient
from .registry import register_model


def fetch(url):
    response = requests.get(url)
    response.raise_for_status()
    started = datetime.now()
    stopped = datetime.now()
    response.started = started
    response.stopped = stopped
    return response


class FakeResponse:
    def __init__(self, url, content, started, stopped):
        self.url = url
        self.content = content
        self.started = started
        self.stopped = stopped


def streaming_fetch(url):
    chunks = []
    with requests.get(url, stream=True) as r:
        r.raise_for_status()
        started = datetime.now()
        for chunk in r.iter_content(chunk_size=4096):
            chunks.append(chunk)
    stopped = datetime.now()
    response = FakeResponse(url, b"".join(chunks), started, stopped)
    return response


@register_model
class GeventClient(BaseClient):
    timestamps = []

    def set_timestamps(self, responses):
        for response in responses:
            self.timestamps.append((response.started, response.stopped))

    def measure_server(self, epoch):
        print("measure server")
        print(epoch.urls[0])
        start = time.perf_counter()
        # jobs = [gevent.spawn(fetch, _url) for _url in epoch.urls]
        jobs = [gevent.spawn(streaming_fetch, _url) for _url in epoch.urls]
        responses = gevent.wait(jobs)
        elapsed = time.perf_counter() - start
        responses = [r.value for r in responses]
        return elapsed, responses

    def measure(self, epoch):
        print("measure")
        elapsed, responses = self.measure_server(epoch)
        self.verify_checksums(epoch, responses)
        self.set_timestamps(responses)
        return elapsed

# Cell

import typer


from .hosts import Host
from .epochs import Epoch
from .servers import BaseServer
from .control.client import ControlClient


def run_gevent_with_args(exponent: int, server_host_name: str):
    print("running requests with gevent")
    typer.echo(f"exponent {exponent}, server_host_name: {server_host_name}")
    control_server_port, server_port = 8100, 5100
    server = BaseServer(host=server_host_name, port=server_port)
    server_control_host = Host(name=server_host_name, port=control_server_port)
    server_control_client = ControlClient(host=server_control_host)
    epoch = Epoch(file_size=10 ** exponent, duration=10)
    epoch.files = server_control_client.get_or_create_files(epoch)
    epoch.create_urls_from_files(server)
    benchmark_client = GeventClient(name="gevent", host=server_host_name, port=server_port)
    elapsed = benchmark_client.measure(epoch)
    print(f"elapsed: {elapsed}")


def run_gevent():
    typer.run(run_gevent_with_args)