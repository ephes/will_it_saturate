# AUTOGENERATED! DO NOT EDIT! File to edit: 12_django_views.ipynb (unless otherwise specified).

__all__ = ['serve_sync_filesystem', 'serve_sync_minio', 'serve_async_filesystem', 'serve_async_minio',
           'serve_async_django_fileresponse', 'serve_async_django_fileresponse_minio', 'client', 'AWS_ACCESS_KEY_ID',
           'AWS_SECRET_ACCESS_KEY', 'bucket', 'key']

# Cell
from pathlib import Path

from django.conf import settings

from fileresponse.http import AiobotocoreFileResponse
from fileresponse.http import AiofileFileResponse as AiofileFileResponse

from .http import AsyncFileResponse
from .http import AsyncMinioResponse
from .http import MeasuringFileResponse

# Cell
import io

import aiobotocore

from minio import Minio

client = Minio("127.0.0.1:9000", "minioadmin", "minioadmin", secure=False)


AWS_ACCESS_KEY_ID = "minioadmin"
AWS_SECRET_ACCESS_KEY = "minioadmin"

bucket = "wis"
key = "data/3000000_2_12500000/0"


def serve_sync_filesystem(request, base, path, num):
    file_path = Path(base) / path / str(num)
    return MeasuringFileResponse(file_path.open("rb"))


def serve_sync_minio(request, base, path, num):
    file_path = Path(base) / path / str(num)
    object_name = str(file_path)
    try:
        response = client.get_object("wis", object_name)
        data = io.BytesIO(response.read())
        data.name = object_name
        return MeasuringFileResponse(data)
    finally:
        response.close()
        response.release_conn()


async def serve_async_filesystem(request, base, path, num):
    file_path = Path(base) / path / str(num)
    return AsyncFileResponse(filename=file_path)


async def serve_async_minio(request, base, path, num):
    file_path = Path(base) / path / str(num)
    bucket = "wis"
    key = str(file_path)
    return AsyncMinioResponse(bucket=bucket, key=key, chunk_size=4096, filename=key)
#     session = aiobotocore.get_session()
#     async with session.create_client(
#             "s3",
#             endpoint_url="http://localhost:9000",
#             region_name="us-west-2",
#             aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
#             aws_access_key_id=AWS_ACCESS_KEY_ID,
#     ) as client:
#         response = await client.get_object(Bucket=bucket, Key=key)
#         async with response["Body"] as stream:
#             data = await stream.read()
#             data = io.BytesIO(data)
#             data.name = key
#             # return AsyncMinioResponse(minio_stream=stream)
#     return MeasuringFileResponse(data)



async def serve_async_django_fileresponse(request, base, path, num):
    file_path = Path(base) / path / str(num)
    return AiofileFileResponse(file_path)


async def serve_async_django_fileresponse_minio(request, base, path, num):
    bucket = settings.DJANGO_AWS_STORAGE_BUCKET_NAME
    key = str(num)
    return AiobotocoreFileResponse(bucket, key, chunk_size=4096)