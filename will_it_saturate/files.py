# AUTOGENERATED! DO NOT EDIT! File to edit: 02_file.ipynb (unless otherwise specified).

__all__ = ['calculate_checksum', 'checksum_for_path', 'create_via_filesystem', 'checksum_for_minio',
           'create_file_minio', 'get_minio_client_and_bucket', 'build_create_via_minio', 'BenchmarkFile',
           'FILE_CREATORS']

# Cell

import os
import io
import hashlib

from minio import Minio
from minio.error import S3Error

from pathlib import Path
from typing import Optional
from pydantic import BaseModel

from .config import settings


def calculate_checksum(content):
    return hashlib.md5(content).hexdigest()


def checksum_for_path(path):
    with path.open("rb") as f:
        checksum = calculate_checksum(f.read())
    return checksum


def create_via_filesystem(path, size):
    path.parent.mkdir(parents=True, exist_ok=True)
    if not path.exists():
        with path.open("wb") as f:
            f.write(os.urandom(size))
    return checksum_for_path(path)


def checksum_for_minio(client, bucket, key):
    try:
        response = client.get_object(bucket, key)
        data = response.read()
    finally:
        response.close()
        response.release_conn()
    return calculate_checksum(data)


def create_file_minio(client, bucket, key, size):
    data = os.urandom(size)

    result = client.put_object(
        bucket,
        key,
        io.BytesIO(data),
        size,
    )
    return calculate_checksum(data)


def get_minio_client_and_bucket(endpoint, params, bucket):
    client = Minio(endpoint, **params)
    found = client.bucket_exists(bucket)
    if not found:
        client.make_bucket(bucket)
    return client


def build_create_via_minio():
    endpoint = settings.minio_endpoint
    params = {
        "access_key": settings.minio_access_key,
        "secret_key": settings.minio_secret_key,
        "secure": False,
    }
    client = None
    bucket = settings.minio_bucket

    def create_via_minio(path, size):
        nonlocal client
        if client is None:
            # dont try to connect to minio server until create_via_minio
            # is really used, because it will break CI otherwise
            client = get_minio_client_and_bucket(endpoint, params, bucket)
        key = str(path)
        try:
            result = client.stat_object(bucket, key)
            checksum = checksum_for_minio(client, bucket, key)
        except S3Error:
            # object does not exist -> create
            checksum = create_file_minio(client, bucket, key, size)

    return create_via_minio


FILE_CREATORS = {"filesystem": create_via_filesystem, "minio": build_create_via_minio()}


class BenchmarkFile(BaseModel):
    number: int
    base_path: str
    size: int
    data_root: str = "data"
    hostname: str = "localhost"
    port: int = 8000
    checksum: Optional[str] = None
    creator_name: str = "filesystem"

    @property
    def filesystem_path(self):
        return Path(self.data_root) / self.base_path / str(self.number)

    def get_or_create(self):
        create = FILE_CREATORS.get(self.creator_name)
        self.checksum = create(self.filesystem_path, self.size)

    @property
    def path(self):
        return f"{self.data_root}/{self.base_path}/{self.number}"

    @property
    def host(self):
        return f"http://{self.hostname}:{self.port}"

    @property
    def url(self):
        return f"{self.host}/{self.path}"