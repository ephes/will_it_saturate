# AUTOGENERATED! DO NOT EDIT! File to edit: 02_fastapi_uvicorn_server.ipynb (unless otherwise specified).

__all__ = ['FastAPIUvicornServer', 'NginxDockerServer']

# Cell

import time
import subprocess

from .core import BenchmarkServer


class FastAPIUvicornServer(BenchmarkServer):
    name: str = "fastAPI/uvicorn"

    def get_pid(self):
        kwargs = {"shell": True, "capture_output": True, "text": True}
        output = subprocess.run(f"ps aux | grep will_it_saturate.main:app", **kwargs)
        lines = [l for l in output.stdout.split("\n") if len(l) > 0 and "grep" not in l]
        if len(lines) > 0:
            pid = lines[0].split()[1]
            return pid

    @property
    def started(self):
        return self.get_pid() is not None

    def start_server(self):
        subprocess.Popen(["uvicorn", "--no-access-log", "will_it_saturate.main:app"])
        # subprocess.Popen(["uvicorn", "will_it_saturate.main:app"])

    def stop_server(self):
        subprocess.check_output(["kill", self.get_pid()])
        time.sleep(1)  # dunno why this is necessary

    def start(self):
        if not self.started:
            self.start_server()

    def stop(self):
        if self.started:
            self.stop_server()

# Cell

import time
import subprocess

from .core import BenchmarkServer


class NginxDockerServer(BenchmarkServer):
    name: str = "nginx/docker"
    docker_name: str = "wis-nginx"
    port: int = 8000
    data_root: str = "data"
    subprocess_kwargs = {"shell": True, "capture_output": True, "text": True}

    def write_dockerfile(self):
        dockerfile = f"""
        FROM nginx
        COPY {data_root} /usr/share/nginx/html/{data_root}
        """
        with Path("Dockerfile.nginx").open("w") as f:
            f.write(dockerfile)

    @property
    def docker_id(self):
        output = subprocess.run(
            f"docker ps | grep {self.docker_name}", **self.subprocess_kwargs
        )
        if len(output.stdout) > 0:
            return output.stdout.split()[0]

    @property
    def started(self):
        return self.docker_id is not None

    def stop_container(self, docker_id):
        output = subprocess.run(f"docker kill {docker_id}", **self.subprocess_kwargs)
        print(output.stdout)

    def remove_container(self):
        output = subprocess.run(
            f"docker rm {self.docker_name}", **self.subprocess_kwargs
        )
        print(output.stdout)

    def build_container(self):
        output = subprocess.run(
            f"docker build -f Dockerfile.nginx -t {self.docker_name} .",
            **self.subprocess_kwargs,
        )
        print(output.stdout)

    def start_container(self):
        output = subprocess.run(
            f"docker run --name {self.docker_name} -d -p {self.port}:80 {self.docker_name}",
            **self.subprocess_kwargs,
        )
        print(output.stdout)

    def start_server(self):
        self.remove_container()
        self.build_container()
        self.start_container()

    def stop_server(self):
        if self.started:
            self.stop_container(self.docker_id)
            self.remove_container()
        time.sleep(1)  # dunno why this is necessary

    def start(self):
        if not self.started:
            self.start_server()

    def stop(self):
        if self.started:
            self.stop_server()